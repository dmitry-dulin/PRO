'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

require(['jquery', 'knockout', 'loader', 'dataManager', 'EntityNavigationViewModel', 'entityApi', 'viewElementParametersHelper', 'moment', 'sessionApi', 'commentApi'], function ($, ko, LoadManager, DataManager, EntityNavigationViewModel, entityApi, viewElementParametersHelper, moment, sessionApi, commentApi) {
  var pageParamsHelper = viewElementParametersHelper.parameters();var entityNavigator = EntityNavigationViewModel.getSingleton();var dataList = [{ id: 1, threadId: null, teamOne: "Some team 1", teamOneLogo: "somepath/1.jpg", teamTwo: "Best team L.A.", teamTwoLogo: "somepath/2.jpg", matchType: "Excellent type", date: new Date(2015, 11, 31), location: "N.Y. Stadium", assigned: false, color: "red", isVisibleInfo: ko.observable(false), gameData: [{ refereePosition: "Referee", status: "Assigned", statusColor: "green", name: "Dwaine Jonson", accept: "some value" }, { refereePosition: "Assistant Referee", status: "Not assigned", statusColor: "red", name: "Terry Hogan", accept: "some outher value" }, { refereePosition: "4th official", status: "Assigned", statusColor: "green", name: "Kerry King", accept: "some next value" }] }, { id: 2, threadId: null, teamOne: "London monsters", teamOneLogo: "somepath/1.jpg", teamTwo: "Best team NY", teamTwoLogo: "somepath/2.jpg", matchType: "Another type", date: new Date(2015, 11, 30), location: "N.Y. Small Stadium", assigned: true, color: "green", isVisibleInfo: ko.observable(false), gameData: [{ refereePosition: "Referee", status: "Assigned", statusColor: "green", name: "Dwaine Jonson", accept: "some value" }, { refereePosition: "Assistant Referee", status: "Not assigned", statusColor: "red", name: "Terry Hogan", accept: "some outher value" }, { refereePosition: "4th official", status: "Assigned", statusColor: "green", name: "Kerry King", accept: "some next value" }] }, { id: 3, threadId: null, teamOne: "London monsters", teamOneLogo: "somepath/1.jpg", teamTwo: "Best team NY", teamTwoLogo: "somepath/2.jpg", matchType: "Another type", date: new Date(2016, 0, 19), location: "N.Y. Small Stadium", assigned: false, color: "amber", isVisibleInfo: ko.observable(false), gameData: [{ refereePosition: "Referee", status: "Assigned", statusColor: "green", name: "Dwaine Jonson", accept: "some value" }, { refereePosition: "Assistant Referee", status: "Not assigned", statusColor: "red", name: "Terry Hogan", accept: "some outher value" }, { refereePosition: "4th official", status: "Assigned", statusColor: "green", name: "Kerry King", accept: "some next value" }] }, { id: 4, threadId: null, teamOne: "London monsters", teamOneLogo: "somepath/1.jpg", teamTwo: "Best team NY", teamTwoLogo: "somepath/2.jpg", matchType: "Another type", date: new Date(2016, 0, 19), location: "N.Y. Small Stadium", assigned: false, color: "amber", isVisibleInfo: ko.observable(false), gameData: [{ refereePosition: "Referee", status: "Assigned", statusColor: "green", name: "Dwaine Jonson", accept: "some value" }, { refereePosition: "Assistant Referee", status: "Not assigned", statusColor: "red", name: "Terry Hogan", accept: "some outher value" }, { refereePosition: "4th official", status: "Assigned", statusColor: "green", name: "Kerry King", accept: "some next value" }] }];
  var MatchListViewModel = function () {
    function MatchListViewModel() {
      _classCallCheck(this, MatchListViewModel);

      var self = this;self.matchList = ko.observableArray();self.assignedCount = ko.observable();self.unnassignedCount = ko.observable();self.refereesList = ko.observableArray();self.currentUserId = ko.observable(null);self.currentUserType = ko.observable(null);self.isRefeeryRole = ko.observable();self.matchListCount = ko.pureComputed(function () {
        return self.assignedCount() + self.unnassignedCount();
      }, self);self.matchList.subscribe(function () {
        self.assignedCount(findCount('assigned', self.matchList()));self.unnassignedCount(self.matchList().length - self.assignedCount());
      });self.refereesList.subscribe(function () {
        if (typeof self.currentUserId() != 'undefined') {
          self.isRefeeryRole(true);
        }
      });self.currentUserId.subscribe(function () {
        if (self.refereesList().length) {
          self.isRefeeryRole(false);
        }
      });
    }

    _createClass(MatchListViewModel, [{
      key: 'toggleTableVisible',
      value: function toggleTableVisible(item) {
        item.isVisibleInfo() == true ? item.isVisibleInfo(false) : item.isVisibleInfo(true);
      }
    }]);

    return MatchListViewModel;
  }();

  function checkIsRefeery(refeeryArray, userId) {
    var result = false;refeeryArray.forEach(function (item) {
      if (item['id'] == userId) {
        result = true;
      }
    });return result;
  }
  function findCount(prop, arr) {
    return arr.filter(function (item) {
      return item[prop] == true;
    }).length;
  }
  ko.bindingHandlers.loadingWhen = { init: function init(element) {
      LoadManager.init(element);
    }, update: function update(element, valueAccessor) {
      LoadManager.update(element, valueAccessor);
    } };
  var matchListViewModel = new MatchListViewModel();entityNavigator.ready.then(function () {
    var userEntity = entityNavigator.currentEntity();var userData = userEntity.data;var userId = userData.id;var entityType = userEntity.entityType;matchListViewModel.currentUserId(userId);matchListViewModel.currentUserType(entityType);DataManager.getProMatches(entityType, userId, function (data) {
      console.log(data);matchListViewModel.matchList(data);
    });
  });ko.applyBindings(matchListViewModel, document.getElementById('match-list'));
});